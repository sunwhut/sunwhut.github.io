<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Sunwhut's Home]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://sunwhut.com/"/>
  <updated>2015-11-19T08:43:02.413Z</updated>
  <id>http://sunwhut.com/</id>
  
  <author>
    <name><![CDATA[sunwhut]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JSP页面批量导入数据到数据库]]></title>
    <link href="http://sunwhut.com/2015/11/15/batchDataImport/"/>
    <id>http://sunwhut.com/2015/11/15/batchDataImport/</id>
    <published>2015-11-15T06:42:50.000Z</published>
    <updated>2015-11-19T08:43:02.413Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>时间过得好快，距离上次写文章已经过去半个月了。这个月开始在<a href="http://www.idna.com.cn/" target="_blank" rel="external">益基武汉生物科技有限公司</a>兼职网站维护，所以有点忙，这篇博文的内容就是在公司的第一项任务。其实刚接到这个任务还有点迷茫，不知道是在后台直接读取不上传excel文件然后再导入数据库，还是先上传excel文件到服务器再处理文件，经过摸索之后选择了后者。<strong>有了正确的解题思路，解决问题就会有目标，有规划了起来。</strong></p>
<h2 id="上传excel文件到服务器">上传excel文件到服务器</h2><p>之前花了好长的时间一直在纠结，到底要不要上传excel文件到服务器。因为我的编程原则就是，能够简单地解决问题，绝对用简单的方法。奈何我没有摸索出在后台正确读取excel文件内容的方法，所以只能先把excel文件上传到服务器上。找了好久，发现了一篇很有参考价值的文章，我的代码就是基于这篇文章修改的：<a href="http://www.runoob.com/jsp/jsp-file-uploading.html" target="_blank" rel="external">JSP 文件上传</a>。</p>
<h3 id="创建文件上传表单">创建文件上传表单</h3><p>因为我要在公司的网页上实现这个功能，所以修改了一下前端代码，不能这么简洁。尽管这个页面的其他内容都是用来包装的，并没什么用，只有这两个按钮是有用的。上传excel文件的页面效果如下：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/batchdataimportbatch1.png" alt="batch1"></li>
</ul>
<h3 id="后台JSP处理脚本">后台JSP处理脚本</h3><p>按照文章中的方法，先在web.xml中设置好文件存储目录，然后下载好common-fileupload和common-io这两个jar包，并在classpath中引入这两个jar包，最后<strong>在文件上传页面选择文件并上传</strong>，却报错了。<strong>查了一下，要重启tomcat</strong>。</p>
<p>重启tomcat之后，继续之前的操作，这次没有报错，后台JSP处理脚本也没有任何输出。不知道问题出在了哪里，在这里纠结了好久，最后选择一句一句地输出调试，顺便研究一下文件上传的代码，学习了一下<a href="http://www.oschina.net/question/127625_17896" target="_blank" rel="external">DiskFileItemFactory类的作用</a>。执行到这里：<br><code>fi.write( file ) ;</code></p>
<p>后台的输出语句就没有打印出来了，应该是这里出了问题。然后又用Xshell查看tomcat的控制台输出信息,进入tomcat/logs/文件夹下 ,输入：<br><code>tail -100 catalina.out</code></p>
<p>查看log文件中最近100行记录，发现了如下错误：<br><code>java.io.FileNotFoundException</code></p>
<p>查了一下，是之前设置的文件存储目录出现了问题。接下来，我没用web.xml设置文件存储目录，改用程序设置路径，如下所示：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> fileInitPath = request.getSession().getServletContext().getRealPath(<span class="string">"/"</span>);   <span class="comment">//获取webapp根目录的绝对路径</span></span><br><span class="line"><span class="built_in">String</span> filePath = fileInitPath + <span class="string">"/WEB-INF/upload"</span>;</span><br></pre></td></tr></table></figure>
<p>修改之后，再在文件上传页面选择文件并上传，JSP页面输出了正确的信息：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/batchdataimportbatch3.png" alt="batch3"></li>
</ul>
<p>可以在后台查看文件已经被上传到服务器上：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/batchdataimportbatch4.png" alt="batch4"></li>
</ul>
<h2 id="处理excel文件">处理excel文件</h2><p>其实就处理excel文件这个问题而言还是蛮简单的，Java处理excel的库也有不少了。我参考了这篇文章：<a href="http://www.cnblogs.com/zyw-205520/p/3762954.html" target="_blank" rel="external">Java实现Excel导入数据库，数据库中的数据导入到Excel</a>,使用的是jxl.jar。</p>
<p>处理excel文件的难点，或者说繁琐之处，就在于一种excel文件格式就需要用相对应的代码来处理，如果excel格式发生变化，后台处理代码也要发生变化。</p>
<p>下面是我刚上传的，也就是我将要处理的excel文件的格式：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/batchdataimportbatch5.png" alt="batch5"></li>
</ul>
<p>与之对应的是后台处理excel文件的代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Workbook rwb=Workbook.getWorkbook(<span class="keyword">new</span> File(filePath + <span class="string">"/"</span> + fileName));</span><br><span class="line">Sheet sheetrs=rwb.getSheet(<span class="number">0</span>);<span class="comment">//或者rwb.getSheet(0)</span></span><br><span class="line"><span class="built_in">int</span> rows=sheetrs.getRows();<span class="comment">//得到所有的行</span></span><br><span class="line"><span class="built_in">int</span> clos=sheetrs.getColumns();<span class="comment">//得到所有的列</span></span><br><span class="line"><span class="comment">//out.println("&lt;p&gt;"+rows+"---"+clos+"&lt;/p&gt;&lt;br/&gt;");</span></span><br><span class="line">ArrayList&lt;ArrayList&lt;<span class="keyword">String</span>&gt;&gt; datas = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;<span class="keyword">String</span>&gt;&gt;();  <span class="comment">//元素是excel每一行的数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">1</span>; k &lt; rows; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; clos; j++) &#123;</span><br><span class="line">        ArrayList&lt;<span class="keyword">String</span>&gt; tmp = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();  <span class="comment">//元素是excel某一行每一列的数据</span></span><br><span class="line">        <span class="comment">//第一个参数是列数，第二个参数是行数 </span></span><br><span class="line">        <span class="keyword">String</span> col0=sheetrs.getCell(j++, k).getContents();<span class="comment">//默认最左边编号也算一列 所以这里得j++</span></span><br><span class="line">        tmp.<span class="built_in">add</span>(col0);</span><br><span class="line">        <span class="keyword">String</span> col1=sheetrs.getCell(j++, k).getContents();</span><br><span class="line">        tmp.<span class="built_in">add</span>(col1);</span><br><span class="line">        <span class="keyword">String</span> col2=sheetrs.getCell(j++, k).getContents();</span><br><span class="line">        tmp.<span class="built_in">add</span>(col2);</span><br><span class="line">        <span class="keyword">String</span> col3=sheetrs.getCell(j++, k).getContents();</span><br><span class="line">        tmp.<span class="built_in">add</span>(col3);</span><br><span class="line">        <span class="keyword">String</span> col4=sheetrs.getCell(j++, k).getContents();</span><br><span class="line">        tmp.<span class="built_in">add</span>(col4);</span><br><span class="line">        <span class="keyword">String</span> col5=sheetrs.getCell(j++, k).getContents();</span><br><span class="line">        tmp.<span class="built_in">add</span>(col5);</span><br><span class="line">        <span class="keyword">String</span> col6=sheetrs.getCell(j++, k).getContents();</span><br><span class="line">        tmp.<span class="built_in">add</span>(col6);</span><br><span class="line">        <span class="keyword">String</span> col7=sheetrs.getCell(j++, k).getContents();</span><br><span class="line">        tmp.<span class="built_in">add</span>(col7);</span><br><span class="line">        datas.<span class="built_in">add</span>(tmp);</span><br><span class="line">        <span class="comment">//out.println("&lt;p&gt;"+id+"---"+name+"---"+sex+"---"+num+"&lt;/p&gt;&lt;br/&gt;");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在JSP页面输出刚才获取的数据，结果如下：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/batchdataimportbatch7.png" alt="batch7"></li>
</ul>
<h2 id="批量导入数据到数据库">批量导入数据到数据库</h2><p>其实前面获取数据才是难点，这里只需要执行sql语句就行了，还是挺简单的，无非就是遍历两个ArrayList,代码如下：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span>&lt;<span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;&gt; it=datas.<span class="keyword">iterator</span>();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">       <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt; temp =  it.next();</span><br><span class="line">       <span class="type">String</span>[] str = new <span class="type">String</span>[clos];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;t&lt;temp.size();t++)&#123;  </span><br><span class="line">          //<span class="keyword">out</span>.println(temp.get(t)+<span class="string">"---"</span>); //用<span class="type">ArrayList</span>输出每一行的数据 </span><br><span class="line">          str[t] = temp.get(t);</span><br><span class="line">       &#125;  </span><br><span class="line">       //执行sql语句</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>到这里，已经实现了批量导入数据到数据库的功能，可以看到数据库里已经插入了excel里的数据：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/batchdataimportbatch8.png" alt="batch8"></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>时间过得好快，距离上次写文章已经过去半个月了。这个月开始在<a href="http://www.idna.com.cn/" target="_blank" rel="external">益基武汉生物科技有限公司</a>兼职网站维护，所]]>
    </summary>
    
      <category term="JSP" scheme="http://sunwhut.com/tags/JSP/"/>
    
      <category term="jxl" scheme="http://sunwhut.com/tags/jxl/"/>
    
      <category term="JSP" scheme="http://sunwhut.com/categories/JSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何利用GitHub Pages和Hexo快速搭建个人博客]]></title>
    <link href="http://sunwhut.com/2015/10/30/buildBlog/"/>
    <id>http://sunwhut.com/2015/10/30/buildBlog/</id>
    <published>2015-10-30T03:04:07.000Z</published>
    <updated>2015-11-19T08:57:18.606Z</updated>
    <content type="html"><![CDATA[<blockquote>
<h5 id="纸上得来终觉浅，绝知此事要躬行">纸上得来终觉浅，绝知此事要躬行</h5></blockquote>
<h2 id="前言">前言</h2><p>“工欲善其事，必先利其器”，在搭建个人博客的过程中，我深刻体会到这句话的含义。虽然早就决定了要搭建个人博客，但是我并没有草草动手，而是提前做了大量的调研工作，包括采用哪种博客系统、选择哪种主题、怎么购买并绑定个性域名等等。事实证明，正因为前期的充分准备，搭建过程才能按部就班地进行。下面先介绍为何选择GitHub Pages和Hexo来搭建博客，然后介绍搭建博客的详细过程。这篇文章可能长的让人想哭，但如果你坚持看完了，肯定会有收获的。此外，本教程不仅面向计算机专业的同学，任何想搭建个人独立博客的同学，都可以来看看。</p>
<h2 id="why_GitHub_Pages_and_Hexo">why GitHub Pages and Hexo</h2><p>之前在<a href="http://sunwhut.com/about/">关于我</a>里面提到过，搭建博客会有三个阶段，我选择的是第三种方法。因为<a href="http://baike.baidu.com/link?url=-ue-1Zi7Pr8gRs5CAfE_rrl3MJsaRpFa-7lJ3E6nrnLPic2r3BXEmcs_W_6pbzLmvdzBpYTJhrp8Y-AzxMKIbq" target="_blank" rel="external">GitHub</a>的存在，我们得以简单快速地搭建个人博客。</p>
<h3 id="GitHub">GitHub</h3><p><a href="https://github.com/" target="_blank" rel="external">GitHub</a>，是一个代码托管网站和社交编程网站。这里聚集了世界上各路技术牛叉的大牛，和最优秀的代码库。把你的博客托管在这里，还有什么不放心的呢O(∩_∩)O。</p>
<h3 id="GitHub_Pages">GitHub Pages</h3><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>，是用来托管GitHub上静态网页的免费站点，那GitHub Pages具体有哪些功能呢：</p>
<ul>
<li><p>有300M免费空间，资料自己管理，保存可靠；</p>
</li>
<li><p>享受 GitHub 的便利，上面有很多大牛，眼界会开阔很多；</p>
</li>
<li><p>可以使用很多现成的博客框架，搭建过程简单快速。</p>
</li>
</ul>
<h3 id="Hexo">Hexo</h3><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">Hexo</a>是一个简单、快速、强大的静态博客框架,出自台湾大学生<a href="http://zespia.tw/" target="_blank" rel="external">tommy351</a>之手。我也看过使用Jekyll、Octopress搭建个人博客的过程，确实要繁琐许多。相比之下Hexo更轻便更快捷，下面是<a href="https://hexo.io/" target="_blank" rel="external">Hexo官网</a>强调Hexo的四大特点：</p>
<ul>
<li><p>极速生成静态页面</p>
</li>
<li><p>支持Markdown</p>
</li>
<li><p>一键部署博客</p>
</li>
<li><p>丰富的插件支持</p>
</li>
</ul>
<hr>
<p>相信大家对GitHub Pages和Hexo有了一定的了解，下面进入正题。</p>
<h2 id="使用GitHub_Pages建立博客站点">使用GitHub Pages建立博客站点</h2><h3 id="注册GitHub">注册GitHub</h3><p>访问<a href="https://github.com/" target="_blank" rel="external">GitHub</a>,注册十分简单，一定要记住注册时使用的邮箱，因为 GitHub 上很多通知都是通过邮箱的。如下图所示：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogsignupGithub.png" alt="注册GitHub"></li>
</ul>
<p>申请成功后，在GitHub官网上登录，并验证邮箱即可。</p>
<h3 id="在GitHub上建立仓库">在GitHub上建立仓库</h3><p>与 GitHub 建立好连接之后，就可以方便的使用它提供的 Pages 服务，GitHub Pages 分两种，一种是用你的GitHub用户名建立的username.github.io这样的用户&amp;组织站点，另一种是依附项目的Pages。</p>
<p>想建立个人博客是用的第一种，形如username.github.io这样的可访问的站点，每个用户名下面只能建立一个。如下图所示：</p>
<ul>
<li><p><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogcreateRepo1.png" alt="建立仓库1"></p>
</li>
<li><p><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogcreateRepo2.png" alt="建立仓库2"></p>
</li>
</ul>
<h2 id="搭建环境">搭建环境</h2><h3 id="安装软件">安装软件</h3><p>依次下载并安装下面两个软件，一直点击下一步即可：</p>
<ul>
<li><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></p>
</li>
<li><p><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></p>
</li>
</ul>
<h3 id="使用GitHub_for_Windows登录GitHub">使用GitHub for Windows登录GitHub</h3><ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogsignin1.png" alt="登录1"></li>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogsignin2.png" alt="登录2"></li>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogsignin3.png" alt="登录3"></li>
</ul>
<h3 id="配置SSH_Key">配置SSH Key</h3><p>我们如何让本地git项目与远程的GitHub建立联系呢？用SSH key。在桌面或开始菜单中找到 Git Shell，打开后输入以下命令：</p>
<p><code>ssh -T git@github.com</code></p>
<p>如图：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogssh1.png" alt="ssh1"></li>
</ul>
<p>如果是下面之类的反馈（或者显示 Hi xxx）：</p>
<p><code>The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?</code></p>
<p>不用紧张，输入 yes 之后,看到下图的结果，就配置成功了：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogssh2.jpg" alt="ssh2"></li>
</ul>
<h2 id="使用Hexo创建博客框架">使用Hexo创建博客框架</h2><h3 id="Hexo安装">Hexo安装</h3><p>打开 Git Shell，启动后依次输入以下命令：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /</span><br><span class="line">npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure></p>
<p>如图：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo1.jpg" alt="Hexo1"></li>
</ul>
<p><strong>提示：cd / 作用是返回根目录，Git Shell 默认装在 C盘，启动时默认路径为 C:\Users\xxx(用户名)\Documents\GitHub，输入 cd / 命令后就返回到了 C盘根目录下，需不需要使用 cd / 看个人习惯（下同）</strong></p>
<h3 id="Hexo部署">Hexo部署</h3><p>Hexo的部署可采用如下方法，输入命令： hexo init [文件名]。</p>
<p>打开Git Shell，启动后依次输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">hexo init Hexo</span><br></pre></td></tr></table></figure></p>
<p>回车后出现该提示则表示正确：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo2.png" alt="Hexo2"></li>
</ul>
<p>这时会发现 C盘根目录下（或是 Git Shell 里指定的目录下）会多出一个文件夹，名为 Hexo。再输入以下命令，安装依赖文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Hexo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>回车后出现该提示则表示正确：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo3.jpg" alt="Hexo3"></li>
</ul>
<p>部署成功之后，Hexo 会自动在目标文件夹建立博客网站所需要的所有文件。此时可以通过输入以下命令在本地进行预览（在刚才创建的文件夹里）：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate </span><br><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure></p>
<p>系统可能会出现提示，请点击允许。如下图所示则表示正确：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo4.jpg" alt="Hexo4"></li>
</ul>
<p>此时打开浏览器，在浏览器地址栏输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> （默认端口为4000）, 便可以看到最原始的博客了。以后发表博文想先预览，也可以通过 hexo server 在本地先跑起来，看看效果。(我在进行这步的时候由于端口号冲突始终没能成功显示，修改端口号也没用，所以最后直接发布到博客预览)。</p>
<p>效果如下图所示：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo5.png" alt="Hexo5"></li>
</ul>
<p>恭喜，到目前为止个人博客的雏形已经有了。</p>
<p>在 Git Shell 中按 Ctrl + C 并输入 y 可以停止该服务。</p>
<h3 id="将本地文件部署到_GitHub">将本地文件部署到 GitHub</h3><h4 id="修改_Hexo_中的__config-yml_文件">修改 Hexo 中的 _config.yml 文件</h4><p>在 Hexo 文件夹下找到 _config.yml 文件,如下图所示：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo6.png" alt="Hexo6"></li>
</ul>
<p>找到其中的 deploy 标签，改成下图所示形式，并保存。<strong>注意：冒号后面要加上一个空格，否则会报错。</strong></p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo7.png" alt="Hexo7"></li>
</ul>
<h4 id="将其_deploy_到仓库中">将其 deploy 到仓库中</h4><p>打开 Git Shell 进入创建的文件夹，依次输入以下命令：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>如果出现下图错误，不要着急：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo8.png" alt="Hexo8"></li>
</ul>
<p>将deploy 的 type 改成 git，然后再在 Git Shell 中运行以下命令:</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>再重新来一遍：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>出现以下提示则表示正确：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloghexo9.jpg" alt="Hexo9"></li>
</ul>
<p>恭喜，到这一步，个人博客就已经部署到 GitHub 上了，你可以到你的<a href="https://github.com/" target="_blank" rel="external">GitHub</a>仓库查看是否已经更新。此时,通过 your_user_name.github.io（即你那个仓库的名称，形如：”你的 GitHub 用户名”.github.io）,就可以看到你的个人博客了。</p>
<hr>
<p><strong>提示：上述搭建步骤大量参考了<a href="http://yangruihan.com/" target="_blank" rel="external">yangruihan</a>的博客，如果你对搭建过程还有疑问，可以查看他的原创博文：<a href="http://yangruihan.com/2015/03/22/Windows%E4%B8%8B%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">Windows下一步步搭建自己的独立博客——使用 GitHub Pages + Hexo 基础教程（一）</a>。</strong></p>
<h2 id="发表博文">发表博文</h2><p>辛苦了这么久，终于回到我们搭建博客最初的目标–写作，现在来看看怎么写博文并发表吧(^__^)。</p>
<h3 id="新建博文">新建博文</h3><p>我们可以使用命令新建一篇博文,使用 Git Shell 进入 Hexo 文件夹，输入以下命令：</p>
<p><code>hexo new &quot;文章题目&quot;</code></p>
<p>命令执行完后，就会发现在 Hexo\source_posts 目录中多了一个文件博文名.md，这就是我们刚才新建的博文。</p>
<p>此外，我们也可以直接进入 Hexo\source_posts 目录中，右键新建一个文本文档，将名字改为博文名.md,这样也新建了一篇博文。</p>
<h3 id="新建页面">新建页面</h3><p>上面新建的博文是显示在单个文章界面，这里新建的页面是作为单个页面显示的，比如下图的分类、标签、归档和关于我，你点击后都是显示为单个页面。</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogwrite1.png" alt="write1"></li>
</ul>
<p>你只需要记住新建博文是用上面的方法，新建页面是用这里的方法就行了，这里也采用命令新建页面：</p>
<p><code>hexo new page &quot;页面名称&quot;</code></p>
<p>命令执行完后，就会发现在在 Hexo\source 目录中多了一个文件夹，里面还有一个index.md,这就代表我们新建了一个页面。</p>
<h3 id="写博文">写博文</h3><p>用文本编辑器打开上面新建的博文，如下图所示：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogwrite2.png" alt="write2"></li>
</ul>
<p>新建的页面略有不同，没有tags和categories标签。</p>
<p>三个”-“后面就是博文的正文内容，接下来就是正儿八经地撰写博文了。</p>
<p>因为我们的博文都是用<a href="http://baike.baidu.com/link?url=IbmQI2KgUUPKG7au6ae9bYTbSZl2ctDyPmHF2RZh2j4tPMKYjjyqERYyqCMHp5rdE5G-x9y7BLyNvBXMpi9tsK" target="_blank" rel="external">Markdown</a>语言写的，所以首先，你需要一个好用的Markdown编辑器。其实好用的Markdown编辑器一大堆，这里就给大家推荐两个，如果你用的不习惯也可以换其它的。</p>
<ul>
<li><p>本地编辑器：<a href="http://pad.haroopress.com/user.html" target="_blank" rel="external">Haroopad</a>,非常小众的一款Markdown编辑器，左边编辑右边实时预览效果，非常轻便；</p>
</li>
<li><p>在线编辑器：<a href="http://mahua.jser.me/" target="_blank" rel="external">MaHua</a>,也是比较小众的一款Markdown编辑器，但效果确实很棒，我的这篇博文就是用MaHua写的。</p>
</li>
</ul>
<p>现在你可以打开新建的博文了，然而还不造怎么下手对吧。其实很简单，除了特殊格式，其它的你就当做在word里面写文章就行了，具体请看这里的Markdown教程：<a href="http://www.jianshu.com/p/1e402922ee32/#" target="_blank" rel="external">Markdown——入门指南</a>。</p>
<h3 id="发博文">发博文</h3><p>呼啦啦，博文写好了，你得发表出去别人才看得到呀。依然在 Git Shell 中进入 Hexo 文件夹，执行下面几条命令，将博客部署到 GitHub 上：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">(若要本地预览就先执行 hexo <span class="keyword">server</span>)</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>快捷命令：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span> == hexo <span class="keyword">generate</span></span><br><span class="line">hexo <span class="keyword">d</span> == hexo deploy</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo <span class="keyword">n</span> == hexo new</span><br><span class="line"># 还能组合使用，如：</span><br><span class="line">hexo <span class="keyword">d</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure></p>
<p>刷新你的个人博客，就可以看到新鲜出炉的博文了，赶紧邀请小伙伴们来欣赏吧。</p>
<hr>
<p>话外音:其实到这里，你已经学会了怎么搭建并发表博客，所以最初的目标已经实现，可以happy地写博客去啦。后面是我自己的选修课，如果你也愿意像我一样折腾，就继续往下看吧O(∩_∩)O。</p>
<h2 id="安装NexT主题">安装NexT主题</h2><h3 id="选择主题">选择主题</h3><p>我们刚才使用Hexo生成的博客使用的是Hexo的默认主题：<a href="https://hexo.io/hexo-theme-landscape/" target="_blank" rel="external">Landscape</a>。怎么说呢，这个主题猛地一看还行，仔细一看还不如猛地一看，所以我决定另寻归宿。</p>
<p>然后，我来到了这里：<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">Themes·Hexo</a>,瞬间有了一种村姑进城的感觉。我是一个一个地看，看得我眼花缭乱也没一个抉择，最后综合网友的评价，选择了这个主题：<a href="http://notes.iissnan.com/" target="_blank" rel="external">NexT</a>。</p>
<ul>
<li><p>简洁大方，比较符合我的品位；</p>
</li>
<li><p>作者<a href="http://notes.iissnan.com/" target="_blank" rel="external">iissnan</a>很勤快，持续更新主题，作者博客的样式就是他正在开发而未上线的NexT主题新样式。</p>
</li>
</ul>
<p>当然，每个人的品位都不一样，你也可以选择其它的主题，当然也欢迎你选择NexT主题，这样就能继续一起愉快地折腾啦。</p>
<h3 id="安装NexT主题-1">安装NexT主题</h3><p>Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong>。</p>
<h4 id="下载_NexT_主题">下载 NexT 主题</h4><p>使用 Git Shell 进入 Hexo 文件夹，输入以下两条命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> Hexo</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure></p>
<h4 id="启用NexT主题">启用NexT主题</h4><p>下载完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。</p>
<h4 id="验证主题是否启用">验证主题是否启用</h4><p>执行上面发博文的命令，刷新你的个人博客，就能看到你设置的主题是否启用。</p>
<h2 id="设置NexT主题和第三方服务">设置NexT主题和第三方服务</h2><p>安装完NexT之后，还是发现不够漂亮对不对，所以下面我们来慢慢地润色你的个人博客。</p>
<h3 id="选择样式">选择样式</h3><p>NexT默认的样式其实也比较丑，幸好作者提供了一款十分漂亮的样式:Mist。启用 Mist 很简单，仅需在 主题配置文件 中将 #scheme: Mist 前面的 # 注释去掉即可。</p>
<h3 id="菜单设置">菜单设置</h3><p>菜单配置在 主题配置文件 的 menu，下面是菜单配置示例：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  #<span class="attribute">home</span>: /</span><br><span class="line">  <span class="attribute">archives</span>: /archives</span><br><span class="line">  <span class="attribute">about</span>: /about</span><br><span class="line">  <span class="attribute">categories</span>: /categories</span><br><span class="line">  <span class="attribute">tags</span>: /tags</span><br><span class="line">  #<span class="attribute">commonweal</span>: /<span class="number">404</span>.html</span><br></pre></td></tr></table></figure></p>
<p>其它的很多在<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官方文档</a>里面已经讲的很清楚了，我就不在这里重复造轮子了，下面我只讲下NexT官方文档里没有提到过的地方。</p>
<ul>
<li><p>sitemap : <a href="http://baike.baidu.com/link?url=Hvuhn8v3mmoNI6iVHm_NrZilTuHxsvLfpZJWZQwlZ4mjAAw_Bd4M_M8AnlPMj_L1Jv2tjFCdTdsV32iuwo_Qwq" target="_blank" rel="external">sitemap</a>是什么,就是一个包含网站中的所有网址以及每个网址的其他元数据的文件，以便搜索引擎可以更加智能地抓取网站。我们先来看看Hexo支持哪些插件：<a href="https://hexo.io/plugins/" target="_blank" rel="external">Plugins | Hexo</a>,可以看到有<a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">hexo-generator-sitemap</a>这个插件，在README.md文件中已经讲述了安装方法，只是要注意sitemap这个标签要加在主题配置文件中。再次部署你的博客，看到你的GitHub仓库中多了sitemap.xml文件，那么sitemap就部署成功了。</p>
</li>
<li><p>多说评论框 : 多说评论框默认的样式确实比较丑，请看这里美哭的效果：<a href="http://www.vsay.cn/one-more-custom-css-lets-you-say-comments-city.html" target="_blank" rel="external">多说自定义CSS 让你的多说评论动感起来</a>；另外，在设置<strong>评论显示样式</strong>时，可以设置为<strong>嵌套显示</strong>，美观了不少。</p>
</li>
<li><p>生成favicon : 所谓<a href="http://baike.baidu.com/link?url=shMog2srG2OphNuZNmQ8LseNMOWIrNwyppJ1YP0TwDp3VUYnzBjiPqb41Cqjr-84wwhZnG55cN_-Cp40ybKjNa" target="_blank" rel="external">favicon</a>,即Favorites Icon,顾名思义，就是收藏夹图标，也是地址栏左边的图标。如果没有设置favicon,地址栏左边就是一片空白，把favicon成你喜欢的图片，打造个性化标志，博客瞬间生动了不少。这里推荐一个网站，可以在线生成favicon,简单实用：<a href="http://www.atool.org/ico.php" target="_blank" rel="external">在线透明favicon ico图标文件制作 - aTool在线工具</a>。生成favcion后，再按照NexT官方文档的方法，就能设置favicon了。</p>
</li>
</ul>
<h2 id="购买并绑定域名">购买并绑定域名</h2><p>哈哈，震撼人心的时刻终于到来了，之前一直都是用的GitHub的二级域名，总有一种又臭又长的感觉。现在，我们就来看看怎么购买自己喜欢的个性化域名，并绑定到你的个人博客上面去。当然，不想花钱购买域名的同学，可以跳过这个步骤，GitHub 提供的二级域名[username.github.io]，平常自己写写博客也够用了。</p>
<h3 id="购买域名">购买域名</h3><p>经过广大网友的推广，我选择使用<a href="https://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>(音译：狗爹)购买域名，比较安全，最重要的是可以使用支付宝！</p>
<p>购买域名可以参考这里：<a href="http://yangruihan.com/2015/03/22/Windows%E4%B8%8B%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">Windows下一步步搭建自己的独立博客——使用 GitHub Pages + Hexo 基础教程（二）</a>,要注意下面几点：</p>
<ul>
<li><p>GoDaddy上有很多优惠码，比如这里:<a href="http://www.goyouhuima.com/" target="_blank" rel="external">GoDaddy优惠码</a>；</p>
</li>
<li><p>如果没有支付宝支付选项，有可能是使用的优惠码不支持支付宝，请尝试别的优惠码；</p>
</li>
<li><p>买完域名之后一定要记得去自己的邮箱查看激活邮件，否则域名激活不了。</p>
</li>
</ul>
<p>如果你在DOMAINS里面看到你购买的域名，如下图所示，则域名购买成功：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloggodaddy.png" alt="godaddy1"></li>
</ul>
<h3 id="将个人域名与_GitHub_Pages_的空间绑定">将个人域名与 GitHub Pages 的空间绑定</h3><p>在 Hexo\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你刚才购买的个人域名 ）。保存后，部署你的博客即可。</p>
<h3 id="DNS设置">DNS设置</h3><p>同样经过广大网友的推广， 我选择<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSpod</a>来设置DNS,速度快、免费、且稳定。</p>
<p>注册DNSpod，添加域名，如下图设置:</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogdnspod1.png" alt="DNSpod1"></li>
</ul>
<p>其中两条A记录指向的IP地址是GitHub Pages的提供的IP:</p>
<ul>
<li><p>192.30.252.153</p>
</li>
<li><p>192.30.252.154</p>
</li>
</ul>
<p>如果博客不能访问，有可能是GitHub更改了空间服务的ip地址，及时到<a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/" target="_blank" rel="external">GitHub Pages</a>查看最新的IP即可。</p>
<p>www指定的记录是你在GitHub托管博客的仓库。</p>
<h3 id="去GoDaddy修改DNS地址">去GoDaddy修改DNS地址</h3><p>更改GoDaddy的Nameservers为DNSpod的NameServers,点击域名管理：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogdnspod3.png" alt="DNSpod2"></li>
</ul>
<p>将GoDaddy的Nameservers更改成f1g1ns1.dnspod.net和f1g1ns2.dnspod.net:</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogdnspod2.png" alt="DNSpod3"></li>
</ul>
<p>最后修改成下图所示即可：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogdnspod4.png" alt="DNSpod4"></li>
</ul>
<p>如果还有疑问可以看：<a href="https://support.dnspod.cn/Kb/showarticle/tsid/42/" target="_blank" rel="external">DNSpod提供的官方帮助</a>。</p>
<p>提示：设置DNS之后短时间内可能无法访问你的个人博客，因为要等待全球递归DNS服务器刷新（最多72小时），不过没问题的话几小时内就可以访问了。</p>
<h2 id="同时将博客部署在GitHub和GitCafe上">同时将博客部署在GitHub和GitCafe上</h2><p><a href="https://gitcafe.com/?locale=zh-CN" target="_blank" rel="external">GitCafe</a>是什么？就是Github 国内山寨版。为了提高博客访问速度，同时将博客做一个备份，可以同时将博客部署在GitHub和GitCafe上。大家有了活跃在GitHub上的经验，那么GitCafe的使用也自然不在话下了。</p>
<h3 id="注册GitCafe">注册GitCafe</h3><p>访问<a href="https://gitcafe.com/?locale=zh-CN" target="_blank" rel="external">GitCafe</a>，快速完成注册。</p>
<h3 id="在GitCafe上建立仓库">在GitCafe上建立仓库</h3><p>在GitHub 和 GitCafe 上建立Pages仓库略有不同，前者的项目必须名为 username.github.io，后者则名为 username，所以你要新建一个项目命名为你的用户名，如下图所示：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloggitcafe1.png" alt="gitcafe1"></li>
</ul>
<h3 id="配置SSH_Key-1">配置SSH  Key</h3><p>这一步，我先按照GitCafe的帮助文档<a href="https://help.gitcafe.com/manuals/help/ssh-key" target="_blank" rel="external">添加 SSH 公钥</a>进行操作，却始终没有成功，应该是本地已经生成的GitHub的密钥造成的影响。然后各种百度，最后终于成功了，下面是我配置的方法。</p>
<h4 id="生成指定名字的密钥">生成指定名字的密钥</h4><p>使用下面命令进入 ssh 目录：<br><code>cd  ~/.ssh</code></p>
<p>你会发现里面已经生成了GitHub的密钥，下面我们来生成指定名字的密钥：<br><code>ssh-keygen -t rsa -C &quot;YOUR_EMAIL@YOUREMAIL.COM&quot; -f ~/.ssh/gitcafe</code></p>
<p>上面输入的是你注册GitCafe的邮箱，文件命名为gitcafe（这里叫什么随意，不要重名即可），然后会生成gitcafe和gitcafe.pub这两个文件。</p>
<p>打开公钥文件（上面输入的是你注册GitCafe的邮箱，文件命名为gitcafe（这里叫什么随意，不要重名即可），然后会生成gitcafe和gitcafe.pub），并把内容复制至GitCafe上。</p>
<h4 id="修改config文件">修改config文件</h4><p>查看ssh目录下是否有config文件，如果没有，新建一个即可，添加如下代码：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host gitcafe<span class="class">.com</span> www<span class="class">.gitcafe</span><span class="class">.com</span></span><br><span class="line">  IdentityFile ~/.ssh/gitcafe</span><br></pre></td></tr></table></figure></p>
<p>最后，你的ssh目录下会有5文件，如下图所示：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloggitssh1.png" alt="gitssh1"></li>
</ul>
<h4 id="测试">测试</h4><p>完成上面的操作后，可以通过下面的命令来测试一下是否可以连接 GitCafe 服务器:<br><code>ssh -T git@gitcafe.com</code><br>成功就会提示：<br><code>Hi xxxxxx! You&#39;ve successfully authenticated, but GitCafe does not provide shell access.</code></p>
<hr>
<p><strong>提示：如果你还有疑问，可以查看这里：<a href="http://segmentfault.com/a/1190000002627706" target="_blank" rel="external">让你的Git使用上ssh协议授权</a></strong></p>
<h3 id="部署到GitHub和GitCafe">部署到GitHub和GitCafe</h3><p>在这里,进入你的Hexo博客目录下面的’.deploy’目录，创建gitcafe-pages分支，输入以下命令：<br><code>git checkout -b gitcafe-pages</code></p>
<p>添加到GitCafe的远程仓库:<br><code>git remote add origin &#39;git@gitcafe.com:yourname/yourname.git&#39;</code></p>
<p>push到GitCafe仓库:<br><code>git push -u origin gitcafe-pages</code></p>
<p>想同时同步到GitHub请执行以下命令(注意这里的git操作需要在.deploy目录),首先切换git工作分支为master：<br><code>git checkout master</code></p>
<p>然后就直接像之前一样使用’hexo d’即可直接提交到GitHub。如果再想提交到GitCafe直接再切换回gitcafe-pages分支即可:<br><code>git checkout gitcafe-pages</code></p>
<h3 id="在GitCafe_Pages上绑定自定义域名">在GitCafe Pages上绑定自定义域名</h3><p>GitCafe Pages 支持绑定自定义域名。进入项目主页，点击右上角的 项目设置 ，在新打开的页面里点击 Pages 服务 一项可以看到自定义域名相关的设置。</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloggitcafe2.png" alt="gitcafe2"></li>
</ul>
<p>填入你要绑定的域名，点击「新增」即可。</p>
<h3 id="在DNSpod上添加记录">在DNSpod上添加记录</h3><p>在DNSpod上添加一条CNAME记录，指向gitcafe.io,如下图所示：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloggitcafe3.png" alt="gitcafe3"></li>
</ul>
<p>再添加一条A记录，设置为gitcafe.io的IP地址，如下图所示：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloggitcafe4.png" alt="gitcafe4"></li>
</ul>
<p>设置完成后，等待一段时间，测试一下，国内IP访问个人博客访问的是GitCafe的空间：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloggitcafe7.png" alt="gitcafe7"></li>
</ul>
<p>翻个墙，国外IP访问个人博客访问的是GitHub的空间：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/bloggitcafe6.png" alt="gitcafe6"></li>
</ul>
<p>到这里，同时将博客部署在GitHub和GitCafe就成功了。</p>
<h2 id="图床">图床</h2><p>如何在博文中插图，使用<a href="http://baike.baidu.com/link?url=a3kLK124T2aLvgGO4Y8t-2KPVBzFp1dZ09WHV894-r7ZFzAjUvZr42cIoaz_w-FnZPMPQya688z_0qsjJ132C_#1" target="_blank" rel="external">图床</a>即可。现在有不少免费的图床，我使用的是<a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云存储</a>，体验用户免费1G空间，认证免费用户10G空间，已经足够使用了，并且很稳定，具体用法可以查看七牛官方文档：<a href="https://portal.qiniu.com/tutorial/index" target="_blank" rel="external">新手上路</a>。此外，这里是七牛的外链地址：</p>
<ul>
<li><img src="http://7xnuu7.com1.z0.glb.clouddn.com/blogqiniu.png" alt="qiniu"></li>
</ul>
<h2 id="后记">后记</h2><p>对于没有写作习惯的我，第一篇博文的撰写过程确实非常痛苦，总共花了差不多两天时间。毕竟是名程序猿，没有逃脱厌恶写文档的通病。这几天也比较忙，曾经一度想过放弃，因为搭建的过程太繁琐了，感觉要写的东西太多了。最后想想我搭建个人博客的初衷，又咬咬牙坚持下来了。一来记下大半个星期搭建博客的过程，开始锻炼写作能力;二来给后来者一个参考，大家相互学习。</p>
<ul>
<li><p>鸣谢：最后，再次向Hexo的作者<a href="http://zespia.tw/" target="_blank" rel="external">tommy351</a> 和 NexT的作者<a href="http://notes.iissnan.com/" target="_blank" rel="external">iissnan</a>表示衷心的感谢，没有他们造的轮子，就没有我的博客。搭建博客过程中<a href="http://jcf94.com/" target="_blank" rel="external">辰帆同学</a>提供了不少帮助，博文也参考了<a href="http://yangruihan.com/" target="_blank" rel="external">yangruihan</a>的原创文章，谢谢你们！！！</p>
</li>
<li><p>后续：如果你在搭建个人博客过程中还有疑问，或者对我的文章还有好的建议，欢迎在这里留言，或者与我联系。</p>
</li>
</ul>
<hr>
<p><strong>原创文章，请尊重作者劳动成果，转载请与作者联系。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<h5 id="纸上得来终觉浅，绝知此事要躬行">纸上得来终觉浅，绝知此事要躬行</h5></blockquote>
<h2 id="前言">前言</h2><p>“工欲善其事，必先利其器”，在搭建个人博客的过程中，我深刻体会到这句话的含义。虽然早就决定了]]>
    </summary>
    
      <category term="Hexo" scheme="http://sunwhut.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://sunwhut.com/tags/NexT/"/>
    
      <category term="Hexo" scheme="http://sunwhut.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://sunwhut.com/2015/10/19/hello-world/"/>
    <id>http://sunwhut.com/2015/10/19/hello-world/</id>
    <published>2015-10-19T10:36:57.534Z</published>
    <updated>2015-10-19T10:36:57.534Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
